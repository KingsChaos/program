合并链表
void union(list *la,list *lb)
{
	int la_len,lb_len,i;
	ElemType e;
	la_len=listlength(la);
	lb_len=listlength(lb);
	for (i=0;i<lb_len;i++)
	{
		GetElem(lb,i,e);
		if(!LocateElem(la,e))
			listInsert(la,++la_len,e);
	}
}
***********************************
线性表顺序存储
#define MAXSZIE 20
typedef int ElemType
typedef struct
{
	ElemType data[MAXSIZE];
	int length;
}SqList;
***********************************
线性表顺序存储GetElem操作
#define OK 1
#define ERROR 0
#define TRUE 1
#define FALSE 0
typedef int Status;
Status GetElem(SqList L,int i,ElemType *e)
{
	if(L.length==0||i<1||i>L.length)
		return ERROR;
	*e=L.data[i-1];
	return OK;
}
***********************************
线性表顺序存储ListInsert操作
Status ListInsert(SqList *l,int i,ElemType *e)
{
	int k;
	if(L->length==MAXSIZE)
		return ERROR;
	if(i<1||i>l->length+1)
		return ERROR;
	if(i<=L->length)
	{
		for(k=l->lengt-1;k>=i-1;k--)
			L->data[k+1]=l->data[k];
	}
	L->data[i-1]=e;
	l-length++;
	return OK;
}
************************************
线性表顺序存储ListDelete操作
Status ListDelete(SqList *L,int i,ElemType *e)
{
	int k;
	if(L->length==0)
		return ERROR;
	if(I<1||i>L->length)
		return ERROR；
	*e=L->data[i-1];
	if(i<L->length)
	{
		for(k=i;k<L->length;k++)
			L->data[i-1]=L->data[i];
	}
	L->length--;
	return ERROR;
}








































